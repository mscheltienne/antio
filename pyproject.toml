[build-system]
build-backend = 'setuptools.build_meta'
requires = [
  'setuptools >= 64.0.0',
]

[project]
authors = [
  {email = 'mathieu.scheltienne@fcbg.ch', name = 'Mathieu Scheltienne'},
]
classifiers = [
  'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
  'Natural Language :: English',
  'Operating System :: MacOS',
  'Operating System :: Microsoft :: Windows',
  'Operating System :: Unix',
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: 3.12',
  'Programming Language :: Python :: 3.13',
  'Programming Language :: Python :: 3.9',
]
dependencies = [
  'click',
  'numpy>=1.23,<3',
  'packaging',
  'psutil',
]
description = 'Python package to handle I/O with the CNT format from ANT Neuro. '
keywords = [
  'ant neuro',
  'cnt',
  'eeg',
  'eego',
  'python',
]
license = {file = 'LICENSE'}
maintainers = [
  {email = 'mathieu.scheltienne@gmail.com', name = 'Mathieu Scheltienne'},
  {name = 'Eric Larson'},
]
name = 'antio'
readme = 'README.md'
requires-python = '>=3.9'
version = '0.5.0'

[project.optional-dependencies]
all = [
  'antio[style]',
  'antio[test]',
]
full = [
  'antio[all]',
]
style = [
  'codespell[toml]>=2.2.4',
  'ruff>=0.6.0',
  'toml-sort',
  'yamllint',
]
test = [
  'mne',
  'pytest-cov',
  'pytest>=8.0',
]

[project.scripts]
antio = 'antio.commands.main:run'

[project.urls]
documentation = 'https://github.com/mscheltienne/antio'
homepage = 'https://github.com/mscheltienne/antio'
source = 'https://github.com/mscheltienne/antio'
tracker = 'https://github.com/mscheltienne/antio/issues'

[tool.cibuildwheel]
archs = "native"
build = "cp312-*"
skip = "*musllinux*"
test-command = "pytest {project}/tests"
test-extras = ["test"]

[tool.cibuildwheel.linux]
repair-wheel-command = [
  "auditwheel repair -w {dest_dir} {wheel}",
  "pipx run abi3audit --strict --report {wheel}",
]

[tool.cibuildwheel.macos]
repair-wheel-command = [
  "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}",
  "pipx run abi3audit --strict --report {wheel}",
]

[tool.cibuildwheel.windows]
before-build = "pip install delvewheel"
repair-wheel-command = [
  "delvewheel repair -w {dest_dir} {wheel}",
  "pipx run abi3audit --strict --report {wheel}",
]

[tool.codespell]
check-filenames = true
check-hidden = true
ignore-words = '.codespellignore'
skip = 'build,.git,.mypy_cache,.pytest_cache,.venv,tests/data'

[tool.coverage.report]
exclude_lines = [
  'if __name__ == .__main__.:',
  'if TYPE_CHECKING:',
  'pragma: no cover',
]
precision = 2

[tool.coverage.run]
branch = true
cover_pylib = false
omit = [
  '**/__init__.py',
  '**/antio/_version.py',
]

[tool.pytest.ini_options]
addopts = ['--color=yes', '--cov-report=', '--durations=20', '--junit-xml=junit-results.xml', '--strict-config', '--tb=short', '-ra', '-v']
filterwarnings = [
  "error",
  "ignore:.*interactive_bk.*:matplotlib._api.deprecation.MatplotlibDeprecationWarning",
]
junit_family = 'xunit2'
minversion = '8.0'

[tool.ruff]
extend-exclude = []
line-length = 88

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
ignore = []
select = ['A', 'B', 'D', 'E', 'F', 'G', 'I', 'LOG', 'NPY', 'PIE', 'PT', 'T20', 'UP', 'W']

[tool.ruff.lint.isort]
known-first-party = ["antio"]

[tool.ruff.lint.per-file-ignores]
'*' = [
  'B904', # 'Within an except clause, raise exceptions with raise ... from ...'
  'D100', # 'Missing docstring in public module'
  'D104', # 'Missing docstring in public package'
  'UP007', # 'Use `X | Y` for type annotations', requires python 3.10
]
'__init__.py' = ['F401']

[tool.ruff.lint.pydocstyle]
convention = 'numpy'

[tool.setuptools]
include-package-data = false

[tool.setuptools.package-data]
'antio.datasets' = ['*registry.txt']

[tool.tomlsort]
all = true
ignore_case = true
trailing_comma_inline_array = true
