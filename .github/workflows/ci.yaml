name: ci
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true
on:  # yamllint disable-line rule:truthy
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * 1'
  release:
    types: [published]

jobs:
  cibuildwheel:
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]
    name: build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - uses: pypa/cibuildwheel@v2.21.0
        env:
          CIBW_TEST_SKIP: "{*macosx*,*win*}"
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-native-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  cibuildwheel_emulated_cross:  # separate out because it's slower and not tested separately
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: aarch64
          - os: windows-latest
            arch: ARM64  # upper-case needed
    name: build wheels on ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup emulation on Linux
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - uses: pypa/cibuildwheel@v2.21.0
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          # https://cibuildwheel.pypa.io/en/stable/faq/#windows-arm64
          CIBW_BEFORE_BUILD_WINDOWS: bash ./tools/cibw_before_build_windows_cross.sh
          CIBW_BUILD_VERBOSITY: 3
          CIBW_TEST_SKIP: "*-win_arm64"
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ matrix.arch }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  test:
    needs: cibuildwheel
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]
        python: ["3.9", "3.12"]
    name: test wheels on ${{ matrix.os }} - py${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-*
          merge-multiple: true
          path: dist
      - run: ls -alt . && ls -alt dist/
      - run: pip install --only-binary antio antio[test] --find-links dist --pre
      - run: antio sys-info --developer
      - run: pytest tests/ --cov=antio --cov-report=xml
      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  test-mne:
    needs: cibuildwheel
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python: 3.12
    name: test MNE on ${{ matrix.os }} - py${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: mne-tools/mne-python
          path: mne-python
      - run: pip install -e mne-python
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-*
          merge-multiple: true
          path: dist
      - run: ls -alt . && ls -alt dist/ && ls -alt mne-python/
      - run: pip install --only-binary antio antio[test] --find-links dist --pre
      - run: antio sys-info --developer
      - uses: ./.github/actions/get-testing-dataset
      - run: pytest mne-python/mne/io/ant/tests/ --cov=antio --cov-report=xml
      - run: pytest tests/ --cov=antio --cov-report=xml --cov-append
      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  editable:
    timeout-minutes: 10
    name: test editable install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: pip install -ve .[test]
      - run: antio sys-info --developer
      - run: pytest tests/ --cov=antio --cov-report=xml
      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  sdist:
    timeout-minutes: 10
    name: create sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: pip install --upgrade build
      - run: python -m build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-sdist
          path: ./dist/*.tar.gz

  check:
    needs: [cibuildwheel, cibuildwheel_emulated_cross, sdist]
    timeout-minutes: 10
    name: run twine check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-*
          merge-multiple: true
          path: dist
      - run: ls -alt . && ls -alt dist/
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: pip install --upgrade twine
      - run: twine check --strict dist/*

  publish:
    needs: [check, test, test-mne]
    name: publish PyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/antio
    timeout-minutes: 10
    if: github.event_name == 'release'
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-*
          merge-multiple: true
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
